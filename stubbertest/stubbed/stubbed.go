// This file was generated by stubber; DO NOT EDIT

package stubbed

import (
	"database/sql"

	"github.com/dradtke/stubber/stubbertest"
)

// SessionManager is a stubbed implementation of stubbertest.SessionManager.
type SessionManager struct {
	// GetUserIDStub defines the implementation for GetUserID.
	GetUserIDStub  func(db *sql.DB, username string) (int64, error)
	getUserIDCalls []struct {
		Db       *sql.DB
		Username string
	}
	// DeactivateStub defines the implementation for Deactivate.
	DeactivateStub  func(db *sql.DB, userIds ...int64)
	deactivateCalls []struct {
		Db      *sql.DB
		UserIds []int64
	}
}

// GetUserID delegates its behavior to the field GetUserIDStub.
func (s *SessionManager) GetUserID(db *sql.DB, username string) (int64, error) {
	if s.GetUserIDStub == nil {
		panic("SessionManager.GetUserID: nil method stub")
	}
	s.getUserIDCalls = append(s.getUserIDCalls, struct {
		Db       *sql.DB
		Username string
	}{Db: db, Username: username})
	return (s.GetUserIDStub)(db, username)
}

// GetUserIDCalls returns a slice of calls made to GetUserID. Each element
// of the slice represents the parameters that were provided.
func (s *SessionManager) GetUserIDCalls() []struct {
	Db       *sql.DB
	Username string
} {
	return s.getUserIDCalls
}

// Deactivate delegates its behavior to the field DeactivateStub.
func (s *SessionManager) Deactivate(db *sql.DB, userIds ...int64) {
	if s.DeactivateStub == nil {
		panic("SessionManager.Deactivate: nil method stub")
	}
	s.deactivateCalls = append(s.deactivateCalls, struct {
		Db      *sql.DB
		UserIds []int64
	}{Db: db, UserIds: userIds})
	(s.DeactivateStub)(db, userIds...)
}

// DeactivateCalls returns a slice of calls made to Deactivate. Each element
// of the slice represents the parameters that were provided.
func (s *SessionManager) DeactivateCalls() []struct {
	Db      *sql.DB
	UserIds []int64
} {
	return s.deactivateCalls
}

// Compile-time check that the implementation matches the interface.
var _ stubbertest.SessionManager = (*SessionManager)(nil)
